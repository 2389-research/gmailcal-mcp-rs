name: Release

on:
    push:
        tags:
            - "*"
    workflow_dispatch:
        inputs:
            version:
                description: "Version to release (without v prefix)"
                required: false
                type: string

# Essential permissions for GitHub releases
permissions:
    contents: write

env:
    BINARY_NAME: mcp-gmailcal

jobs:
    release:
        name: Create Release
        runs-on: ubuntu-latest
        outputs:
            version: ${{ env.VERSION }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            # Get version number from tag or input
            - name: Set version (from tag)
              if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
              run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

            - name: Set version (from input)
              if: github.event_name == 'workflow_dispatch' && github.event.inputs.version != ''
              run: echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

            - name: Set version (from Cargo.toml)
              if: env.VERSION == ''
              run: |
                  VERSION=$(grep -m1 'version =' Cargo.toml | sed -E 's/version = "([^"]+)"/\1/g')
                  echo "VERSION=$VERSION" >> $GITHUB_ENV

            - name: Show version
              run: echo "Building release for version ${{ env.VERSION }}"

            # Create GitHub Release
            - name: Create GitHub Release
              uses: softprops/action-gh-release@v1
              with:
                  name: Release ${{ env.VERSION }}
                  tag_name: v${{ env.VERSION }}
                  draft: false
                  generate_release_notes: true
                  token: ${{ github.token }}

    # Matrix build for multiple platforms
    build:
        name: Build for ${{ matrix.platform }}
        needs: release
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                include:
                    - os: macos-latest
                      platform: macOS Universal Binary
                      target: universal-apple-darwin
                      binary_path: target/universal-apple-darwin/release/mcp-gmailcal
                      asset_name: mcp-gmailcal-macos-universal.tar.gz
                      use_universal: true

                    # - os: windows-latest
                    #   platform: Windows
                    #   target: x86_64-pc-windows-msvc
                    #   binary_path: target/release/mcp-gmailcal.exe
                    #   asset_name: mcp-gmailcal-windows-x86_64.zip

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Install Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.use_universal == true && 'x86_64-apple-darwin,aarch64-apple-darwin' || matrix.target }}
                  
            # Set up Apple code signing certificate and keychain
            - name: Install Apple certificate and provisioning profile
              if: runner.os == 'macOS'
              env:
                APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
                APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
                APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
                KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD || 'temporary_password' }}
              run: |
                # Create keychain
                security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
                security default-keychain -s build.keychain
                security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
                security set-keychain-settings -t 3600 -u build.keychain
                
                # Import certificate
                echo "$APPLE_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
                security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
                security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain
                
                # Clean up
                rm certificate.p12

            # Standard build for most platforms
            - name: Build (standard)
              if: matrix.use_universal != true
              run: cargo build --release --target ${{ matrix.target }}

            # Create a universal macOS binary (Intel + Apple Silicon)
            - name: Build macOS Universal Binary
              if: matrix.use_universal == true
              run: |
                  # Build for Intel
                  cargo build --release --target x86_64-apple-darwin

                  # Build for Apple Silicon
                  cargo build --release --target aarch64-apple-darwin

                  # Create output directory
                  mkdir -p target/universal-apple-darwin/release

                  # Create universal binary using lipo
                  lipo -create -output target/universal-apple-darwin/release/mcp-gmailcal \
                    target/x86_64-apple-darwin/release/mcp-gmailcal \
                    target/aarch64-apple-darwin/release/mcp-gmailcal

            - name: Strip binary (Unix)
              if: runner.os != 'Windows'
              run: strip ${{ matrix.binary_path }}
              continue-on-error: true
              
            # Code sign the macOS binary
            - name: Code Sign macOS Binary
              if: runner.os == 'macOS'
              env:
                APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
              run: |
                # Code sign the binary with hardened runtime
                codesign --force --options runtime --sign "Developer ID Application: ${APPLE_TEAM_ID}" ${{ matrix.binary_path }}
                
                # Verify signature
                codesign --verify --verbose ${{ matrix.binary_path }}
                
            # Notarize the macOS app
            - name: Notarize macOS app
              if: runner.os == 'macOS'
              env:
                APPLE_ID: ${{ secrets.APPLE_ID }}
                APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
                APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
              run: |
                # Create a temporary zip for notarization
                ditto -c -k --keepParent ${{ matrix.binary_path }} notarize.zip
                
                # Submit for notarization
                xcrun notarytool submit notarize.zip \
                  --apple-id "$APPLE_ID" \
                  --password "$APPLE_APP_PASSWORD" \
                  --team-id "$APPLE_TEAM_ID" \
                  --wait
                  
                # Clean up
                rm notarize.zip

            # Package assets based on platform
            - name: Package for Unix
              if: runner.os != 'Windows'
              run: |
                  mkdir -p dist
                  cp ${{ matrix.binary_path }} dist/${{ env.BINARY_NAME }}
                  cd dist && tar -czf ${{ matrix.asset_name }} ${{ env.BINARY_NAME }}

            - name: Package for Windows
              if: runner.os == 'Windows'
              shell: bash
              run: |
                  mkdir -p dist
                  cp ${{ matrix.binary_path }} dist/
                  cd dist && 7z a -tzip ${{ matrix.asset_name }} ${{ env.BINARY_NAME }}.exe

            # Upload to GitHub Release
            - name: Upload assets
              uses: softprops/action-gh-release@v1
              with:
                  files: dist/${{ matrix.asset_name }}
                  tag_name: v${{ needs.release.outputs.version }}
                  token: ${{ github.token }}
